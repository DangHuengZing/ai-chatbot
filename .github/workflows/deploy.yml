name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Server via SSH
      env:
        PROJECT_DIR: "~/ai_project"
        VENV_ACTIVATE_PATH: "~/ai_project/venv/bin/activate"
        GUNICORN_APP: "ai_site.wsgi:application"
        GUNICORN_BIND_ADDRESS: "127.0.0.1:8001"
        GUNICORN_PORT: "8001"
        GUNICORN_WORKERS: "3"
        GUNICORN_TIMEOUT: "180"
        GUNICORN_WORKER_CLASS: "sync"
        GUNICORN_LOG_LEVEL: "debug"
        GUNICORN_ACCESS_LOG_FILE: "~/ai_project/gunicorn_access.log"
        GUNICORN_ERROR_LOG_FILE: "~/ai_project/gunicorn_error.log"
        GUNICORN_CAPTURE_LOG_FILE: "~/ai_project/gunicorn_stdout_stderr.log"

      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} "bash -s" << 'EOF'
          set -e
          echo "--- ËøõÂÖ•È°πÁõÆÁõÆÂΩï ---"
          cd "$PROJECT_DIR" || { echo "‚ùå Êó†Ê≥ïËøõÂÖ• $PROJECT_DIR"; exit 1; }
          pwd

          echo "--- Git ÊãâÂèñÊõ¥Êñ∞ ---"
          current_branch=\$(git rev-parse --abbrev-ref HEAD)
          if [ "\$current_branch" != "main" ]; then
            git checkout main || { echo "‚ùå ÂàáÊç¢Âà∞ main ÂàÜÊîØÂ§±Ë¥•"; exit 1; }
          fi
          git reset --hard HEAD
          git fetch origin
          git reset --hard origin/main
          echo "‚úÖ ‰ª£Á†ÅÊõ¥Êñ∞ÂÆåÊàê"

          echo "--- ÂÅúÊ≠¢Êóß Gunicorn ÂÆû‰æã ---"
          PORT_TO_CHECK=\$GUNICORN_PORT
          PIDS=\$(lsof -t -i:\$PORT_TO_CHECK || true)
          if [ -n "\$PIDS" ]; then
            echo "Â∞ùËØï kill -9 \$PIDS"
            kill -9 \$PIDS || echo "kill -9 Â§±Ë¥•"
            sleep 3
          fi

          echo "üîç Êü•ÊùÄÊÆãÁïô gunicorn ËøõÁ®ã..."
          ps aux | grep gunicorn | grep -v grep | awk '{print \$2}' | xargs -r kill -9 || echo "Êó†ÊÆãÁïô gunicorn ËøõÁ®ã"
          sleep 3

          REMAINING=\$(lsof -t -i:\$PORT_TO_CHECK || true)
          if [ -n "\$REMAINING" ]; then
            echo "‚ùå Á´ØÂè£ \$PORT_TO_CHECK ‰ªçË¢´Âç†Áî®: \$REMAINING"
            exit 1
          fi

          echo "--- ÂêØÂä® Gunicorn ---"
          source "$VENV_ACTIVATE_PATH"

          GUNICORN_COMMAND="nohup gunicorn \${GUNICORN_APP} \
            --bind \${GUNICORN_BIND_ADDRESS} \
            --workers \${GUNICORN_WORKERS} \
            --timeout \${GUNICORN_TIMEOUT} \
            --worker-class \${GUNICORN_WORKER_CLASS} \
            --log-level \${GUNICORN_LOG_LEVEL} \
            --access-logfile \${GUNICORN_ACCESS_LOG_FILE} \
            --error-logfile \${GUNICORN_ERROR_LOG_FILE} > \${GUNICORN_CAPTURE_LOG_FILE} 2>&1 &"

          echo "ÊâßË°åÔºö\$GUNICORN_COMMAND"
          eval "\$GUNICORN_COMMAND"
          sleep 5

          if lsof -Pi TCP:\$PORT_TO_CHECK -sTCP:LISTEN -t > /dev/null ; then
            echo "‚úÖ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅGunicorn Â∑≤ËøêË°åÔºÅ"
          else
            echo "‚ùå Gunicorn ÂêØÂä®Â§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•Êó•ÂøóÔºö"
            echo "ERROR: \${GUNICORN_ERROR_LOG_FILE}"
            echo "CAPTURE: \${GUNICORN_CAPTURE_LOG_FILE}"
            exit 1
          fi
        EOF
